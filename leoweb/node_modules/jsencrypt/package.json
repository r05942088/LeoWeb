{
  "_args": [
    [
      "jsencrypt@git+https://github.com/kreopt/jsencrypt.git",
      "/home/christy/LeoWeb/leoweb/node_modules/streamedian"
    ]
  ],
  "_from": "git+https://github.com/kreopt/jsencrypt.git",
  "_id": "jsencrypt@2.3.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/jsencrypt",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/kreopt/jsencrypt/master/package.json",
      "gitUrl": "git://github.com/kreopt/jsencrypt.git",
      "httpsUrl": "git+https://github.com/kreopt/jsencrypt.git",
      "shortcut": "github:kreopt/jsencrypt",
      "ssh": "git@github.com:kreopt/jsencrypt.git",
      "sshUrl": "git+ssh://git@github.com/kreopt/jsencrypt.git",
      "type": "github"
    },
    "name": "jsencrypt",
    "raw": "jsencrypt@git+https://github.com/kreopt/jsencrypt.git",
    "rawSpec": "git+https://github.com/kreopt/jsencrypt.git",
    "scope": null,
    "spec": "git+https://github.com/kreopt/jsencrypt.git",
    "type": "hosted"
  },
  "_requiredBy": [
    "/streamedian"
  ],
  "_resolved": "git+https://github.com/kreopt/jsencrypt.git#02c7522a02c1ba5b375c456063296634cbe2a114",
  "_shasum": "962430fe32bd61d5e861fc8caf7c15a1df96e92b",
  "_shrinkwrap": null,
  "_spec": "jsencrypt@git+https://github.com/kreopt/jsencrypt.git",
  "_where": "/home/christy/LeoWeb/leoweb/node_modules/streamedian",
  "bugs": {
    "url": "http://github.com/travist/jsencrypt/issues"
  },
  "contributors": [
    {
      "name": "Travis Tidwell",
      "email": "travis@form.io",
      "url": "http://github.com/travist"
    },
    {
      "name": "Antonio",
      "url": "https://github.com/zoloft"
    },
    {
      "name": "Julio",
      "url": "https://github.com/jmgaya"
    }
  ],
  "dependencies": {
    "gulp-rename": "^1.2.2",
    "gulp-uglify": "^1.5.3"
  },
  "description": "A Javascript library to perform OpenSSL RSA Encryption, Decryption, and Key Generation.",
  "devDependencies": {
    "gulp": "^3.9.1",
    "gulp-concat": "^2.6.0",
    "gulp-eslint": "^2.0.0",
    "gulp-insert": "^0.5.0",
    "gulp-watch": "^4.3.5",
    "gulp-wrap": "^0.11.0"
  },
  "gitHead": "02c7522a02c1ba5b375c456063296634cbe2a114",
  "homepage": "http://www.travistidwell.com/jsencrypt",
  "main": "bin/jsencrypt.js",
  "name": "jsencrypt",
  "optionalDependencies": {},
  "readme": "Website\n======================\nhttp://travistidwell.com/jsencrypt\n\nIntroduction\n======================\nWhen browsing the internet looking for a good solution to RSA Javascript\nencryption, there is a whole slew of libraries that basically take the fantastic\nwork done by Tom Wu @ http://www-cs-students.stanford.edu/~tjw/jsbn/ and then\nmodify that code to do what they want.\n\nWhat I couldn't find, however, was a simple wrapper around this library that\nbasically uses the library <a href=\"https://github.com/travist/jsencrypt/pull/6\">practically</a> untouched, but adds a wrapper to provide parsing of\nactual Private and Public key-pairs generated with OpenSSL.\n\nThis library is the result of these efforts.\n\nHow to use this library.\n=======================\nThis library should work hand-in-hand with openssl.  With that said, here is how to use this library.\n\n - Within your terminal (Unix based OS) type the following.\n\n```\nopenssl genrsa -out rsa_1024_priv.pem 1024\n```\n\n - This generates a private key, which you can see by doing the following...\n\n```\ncat rsa_1024_priv.pem\n```\n\n - You can then copy and paste this in the Private Key section of within index.html.\n - Next, you can then get the public key by executing the following command.\n\n```\nopenssl rsa -pubout -in rsa_1024_priv.pem -out rsa_1024_pub.pem\n```\n\n - You can see the public key by typing...\n\n```\ncat rsa_1024_pub.pem\n```\n\n - Now copy and paste this in the Public key within the index.html.\n - Now you can then convert to and from encrypted text by doing the following in code.\n\n\n```html\n<!doctype html>\n<html>\n  <head>\n    <title>JavaScript RSA Encryption</title>\n    <script src=\"http://code.jquery.com/jquery-1.8.3.min.js\"></script>\n    <script src=\"bin/jsencrypt.min.js\"></script>\n    <script type=\"text/javascript\">\n\n      // Call this code when the page is done loading.\n      $(function() {\n\n        // Run a quick encryption/decryption when they click.\n        $('#testme').click(function() {\n\n          // Encrypt with the public key...\n          var encrypt = new JSEncrypt();\n          encrypt.setPublicKey($('#pubkey').val());\n          var encrypted = encrypt.encrypt($('#input').val());\n\n          // Decrypt with the private key...\n          var decrypt = new JSEncrypt();\n          decrypt.setPrivateKey($('#privkey').val());\n          var uncrypted = decrypt.decrypt(encrypted);\n\n          // Now a simple check to see if the round-trip worked.\n          if (uncrypted == $('#input').val()) {\n            alert('It works!!!');\n          }\n          else {\n            alert('Something went wrong....');\n          }\n        });\n      });\n    </script>\n  </head>\n  <body>\n    <label for=\"privkey\">Private Key</label><br/>\n    <textarea id=\"privkey\" rows=\"15\" cols=\"65\">-----BEGIN RSA PRIVATE KEY-----\nMIICXQIBAAKBgQDlOJu6TyygqxfWT7eLtGDwajtNFOb9I5XRb6khyfD1Yt3YiCgQ\nWMNW649887VGJiGr/L5i2osbl8C9+WJTeucF+S76xFxdU6jE0NQ+Z+zEdhUTooNR\naY5nZiu5PgDB0ED/ZKBUSLKL7eibMxZtMlUDHjm4gwQco1KRMDSmXSMkDwIDAQAB\nAoGAfY9LpnuWK5Bs50UVep5c93SJdUi82u7yMx4iHFMc/Z2hfenfYEzu+57fI4fv\nxTQ//5DbzRR/XKb8ulNv6+CHyPF31xk7YOBfkGI8qjLoq06V+FyBfDSwL8KbLyeH\nm7KUZnLNQbk8yGLzB3iYKkRHlmUanQGaNMIJziWOkN+N9dECQQD0ONYRNZeuM8zd\n8XJTSdcIX4a3gy3GGCJxOzv16XHxD03GW6UNLmfPwenKu+cdrQeaqEixrCejXdAF\nz/7+BSMpAkEA8EaSOeP5Xr3ZrbiKzi6TGMwHMvC7HdJxaBJbVRfApFrE0/mPwmP5\nrN7QwjrMY+0+AbXcm8mRQyQ1+IGEembsdwJBAN6az8Rv7QnD/YBvi52POIlRSSIM\nV7SwWvSK4WSMnGb1ZBbhgdg57DXaspcwHsFV7hByQ5BvMtIduHcT14ECfcECQATe\naTgjFnqE/lQ22Rk0eGaYO80cc643BXVGafNfd9fcvwBMnk0iGX0XRsOozVt5Azil\npsLBYuApa66NcVHJpCECQQDTjI2AQhFc1yRnCU/YgDnSpJVm1nASoRUnU8Jfm3Oz\nuku7JUXcVpt08DFSceCEX9unCuMcT72rAQlLpdZir876\n-----END RSA PRIVATE KEY-----</textarea><br/>\n    <label for=\"pubkey\">Public Key</label><br/>\n    <textarea id=\"pubkey\" rows=\"15\" cols=\"65\">-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDlOJu6TyygqxfWT7eLtGDwajtN\nFOb9I5XRb6khyfD1Yt3YiCgQWMNW649887VGJiGr/L5i2osbl8C9+WJTeucF+S76\nxFxdU6jE0NQ+Z+zEdhUTooNRaY5nZiu5PgDB0ED/ZKBUSLKL7eibMxZtMlUDHjm4\ngwQco1KRMDSmXSMkDwIDAQAB\n-----END PUBLIC KEY-----</textarea><br/>\n    <label for=\"input\">Text to encrypt:</label><br/>\n    <textarea id=\"input\" name=\"input\" type=\"text\" rows=4 cols=70>This is a test!</textarea><br/>\n    <input id=\"testme\" type=\"button\" value=\"Test Me!!!\" /><br/>\n  </body>\n</html>\n```\n\n - Look at how http://www.travistidwell.com/jsencrypt/example.html works to get a better idea.\n\nOther Information\n========================\n\nThis library heavily utilizes the wonderful work of Tom Wu found at http://www-cs-students.stanford.edu/~tjw/jsbn/.\n\nThis jsbn library was written using the raw variables to perform encryption.  This is great for encryption, but most private keys use a Private Key in the PEM format seen below.\n\n1024 bit RSA Private Key in Base64 Format\n-----------------------------------------\n```\n-----BEGIN RSA PRIVATE KEY-----\nMIICXgIBAAKBgQDHikastc8+I81zCg/qWW8dMr8mqvXQ3qbPAmu0RjxoZVI47tvs\nkYlFAXOf0sPrhO2nUuooJngnHV0639iTTEYG1vckNaW2R6U5QTdQ5Rq5u+uV3pMk\n7w7Vs4n3urQ6jnqt2rTXbC1DNa/PFeAZatbf7ffBBy0IGO0zc128IshYcwIDAQAB\nAoGBALTNl2JxTvq4SDW/3VH0fZkQXWH1MM10oeMbB2qO5beWb11FGaOO77nGKfWc\nbYgfp5Ogrql4yhBvLAXnxH8bcqqwORtFhlyV68U1y4R+8WxDNh0aevxH8hRS/1X5\n031DJm1JlU0E+vStiktN0tC3ebH5hE+1OxbIHSZ+WOWLYX7JAkEA5uigRgKp8ScG\nauUijvdOLZIhHWq7y5Wz+nOHUuDw8P7wOTKU34QJAoWEe771p9Pf/GTA/kr0BQnP\nQvWUDxGzJwJBAN05C6krwPeryFKrKtjOGJIniIoY72wRnoNcdEEs3HDRhf48YWFo\nriRbZylzzzNFy/gmzT6XJQTfktGqq+FZD9UCQGIJaGrxHJgfmpDuAhMzGsUsYtTr\niRox0D1Iqa7dhE693t5aBG010OF6MLqdZA1CXrn5SRtuVVaCSLZEL/2J5UcCQQDA\nd3MXucNnN4NPuS/L9HMYJWD7lPoosaORcgyK77bSSNgk+u9WSjbH1uYIAIPSffUZ\nbti+jc1dUg5wb+aeZlgJAkEAurrpmpqj5vg087ZngKfFGR5rozDiTsK5DceTV97K\na3Y+Nzl+XWTxDBWk4YPh2ZlKv402hZEfWBYxUDn5ZkH/bw==\n-----END RSA PRIVATE KEY-----\n```\n\nThis library simply takes keys in the following format, and translates it to those variables needed to perform the encryptions used in Tom Wu's library.\n\nHere are some good resources to investigate further.\n - http://etherhack.co.uk/asymmetric/docs/rsa_key_breakdown.html\n - http://www.di-mgt.com.au/rsa_alg.html\n - https://polarssl.org/kb/cryptography/asn1-key-structures-in-der-and-pem\n\nWith this information, we can translate a private key format to the variables\nrequired with the jsbn library from Tom Wu by using the following mappings.\n\n```\nmodulus => n\npublic exponent => e\nprivate exponent => d\nprime1 => p\nprime2 => q\nexponent1 => dmp1\nexponent2 => dmq1\ncoefficient => coeff\n```\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/travist/jsencrypt.git"
  },
  "scripts": {
    "prepublish": "node_modules/gulp/bin/gulp.js"
  },
  "version": "2.3.1"
}
